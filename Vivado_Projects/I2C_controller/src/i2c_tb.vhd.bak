library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use std.textio.all;
use std.env.finish;

entity i2c_tb is
end i2c_tb;

architecture sim of i2c_tb is

    constant clk_hz : integer := 10e6;
    constant clk_period : time := 1 sec / clk_hz;

    constant i2c_hz: integer := 100e3;

    signal clk : std_logic := '1';
    signal rst : std_logic := '1';
    signal scl: std_logic := 'Z';
    signal sda: std_logic := 'Z';   
    signal cmd_tdata: std_logic_vector(7 downto 0) := (others => '0');
    signal cmd_tvalid: std_logic := '0';
    signal cmd_tready: std_logic;
    signal rd_tdata: std_logic_vector(7 downto 0);
    signal rd_tvalid: std_logic;
    signal rd_tready: std_logic := '0';
    signal nack: out std_logic;

begin

    clk <= not clk after clk_period / 2;

    DUT : entity work.i2c_controller(rtl)
    generic map (,
        clk_hz => clk_hz, 
        i2c_hz => i2c_hz
    )  
    port map (
        clk => clk,
        rst => rst,

        scl => scl,
        sda => sda,
        cmd_tdata => cmd_tdata,  
        cmd_tvalid => cmd_tvalid,
        cmd_tready => cmd_tready,
        rd_tdata => rd_tdata,
        rd_tvalid => rd_tvalid,  
        rd_tready => rd_tready,  
        nack => nack        
    );

    SEQUENCER_PROC : process
    begin
        wait for clk_period * 2;

        rst <= '0';

        wait for clk_period * 10;
        assert false
            report "Replace this with your test cases"
            severity failure;

        finish;
    end process;

end architecture;